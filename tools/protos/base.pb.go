// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.7.1
// source: proto_files/base.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoomSettingPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnLimitTime uint32 `protobuf:"varint,1,opt,name=turn_limit_time,json=turnLimitTime,proto3" json:"turn_limit_time,omitempty"` //回合时间限制
	SeasonIsOpen  bool   `protobuf:"varint,2,opt,name=season_is_open,json=seasonIsOpen,proto3" json:"season_is_open,omitempty"`    //赛季开关
	AiLevel       uint32 `protobuf:"varint,3,opt,name=ai_level,json=aiLevel,proto3" json:"ai_level,omitempty"`                     //ai等级
}

func (x *RoomSettingPt) Reset() {
	*x = RoomSettingPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSettingPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSettingPt) ProtoMessage() {}

func (x *RoomSettingPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSettingPt.ProtoReflect.Descriptor instead.
func (*RoomSettingPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{0}
}

func (x *RoomSettingPt) GetTurnLimitTime() uint32 {
	if x != nil {
		return x.TurnLimitTime
	}
	return 0
}

func (x *RoomSettingPt) GetSeasonIsOpen() bool {
	if x != nil {
		return x.SeasonIsOpen
	}
	return false
}

func (x *RoomSettingPt) GetAiLevel() uint32 {
	if x != nil {
		return x.AiLevel
	}
	return 0
}

//玩家信息
type PlayerPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName      string         `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                 //昵称
	LastCharacter uint32         `protobuf:"varint,2,opt,name=last_character,json=lastCharacter,proto3" json:"last_character,omitempty"` //最近一次使用到角色id
	PunishMatch   *PunishMatchPt `protobuf:"bytes,3,opt,name=punish_match,json=punishMatch,proto3" json:"punish_match,omitempty"`        //匹配惩罚
	Grade         uint32         `protobuf:"varint,4,opt,name=grade,proto3" json:"grade,omitempty"`                                      //grade
	GradeFrame    uint32         `protobuf:"varint,5,opt,name=grade_frame,json=gradeFrame,proto3" json:"grade_frame,omitempty"`          //grade像框
	Soul          uint32         `protobuf:"varint,6,opt,name=soul,proto3" json:"soul,omitempty"`                                        //灵魂头像
	BestRank      int32          `protobuf:"varint,7,opt,name=best_rank,json=bestRank,proto3" json:"best_rank,omitempty"`                //最佳排行，为负数代表没有数据
	League        *LeaguePt      `protobuf:"bytes,8,opt,name=league,proto3" json:"league,omitempty"`                                     //玩家段位数据
	Dlc           []uint32       `protobuf:"varint,9,rep,packed,name=dlc,proto3" json:"dlc,omitempty"`                                   //dlc
}

func (x *PlayerPt) Reset() {
	*x = PlayerPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPt) ProtoMessage() {}

func (x *PlayerPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPt.ProtoReflect.Descriptor instead.
func (*PlayerPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerPt) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *PlayerPt) GetLastCharacter() uint32 {
	if x != nil {
		return x.LastCharacter
	}
	return 0
}

func (x *PlayerPt) GetPunishMatch() *PunishMatchPt {
	if x != nil {
		return x.PunishMatch
	}
	return nil
}

func (x *PlayerPt) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *PlayerPt) GetGradeFrame() uint32 {
	if x != nil {
		return x.GradeFrame
	}
	return 0
}

func (x *PlayerPt) GetSoul() uint32 {
	if x != nil {
		return x.Soul
	}
	return 0
}

func (x *PlayerPt) GetBestRank() int32 {
	if x != nil {
		return x.BestRank
	}
	return 0
}

func (x *PlayerPt) GetLeague() *LeaguePt {
	if x != nil {
		return x.League
	}
	return nil
}

func (x *PlayerPt) GetDlc() []uint32 {
	if x != nil {
		return x.Dlc
	}
	return nil
}

type SeasonPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId  uint32 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`    //当前赛季id
	StartTime uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
}

func (x *SeasonPt) Reset() {
	*x = SeasonPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonPt) ProtoMessage() {}

func (x *SeasonPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonPt.ProtoReflect.Descriptor instead.
func (*SeasonPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{2}
}

func (x *SeasonPt) GetSeasonId() uint32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonPt) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonPt) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type WorldBossPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldBossId uint32 `protobuf:"varint,1,opt,name=world_boss_id,json=worldBossId,proto3" json:"world_boss_id,omitempty"` //当前worldbossid
	StartTime   uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`         //开始时间
	EndTime     uint64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`               //结束时间
}

func (x *WorldBossPt) Reset() {
	*x = WorldBossPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldBossPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldBossPt) ProtoMessage() {}

func (x *WorldBossPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldBossPt.ProtoReflect.Descriptor instead.
func (*WorldBossPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{3}
}

func (x *WorldBossPt) GetWorldBossId() uint32 {
	if x != nil {
		return x.WorldBossId
	}
	return 0
}

func (x *WorldBossPt) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WorldBossPt) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//队伍成员结构体
type MemberPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   //玩家id
	NickName    string       `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`              //玩家昵称
	Cter        *CharacterPt `protobuf:"bytes,3,opt,name=cter,proto3" json:"cter,omitempty"`                                      //玩家已经选择的角色数据
	State       uint32       `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`                                   //玩家状态，是否已经准备 1:未准备，2：准备
	Grade       uint32       `protobuf:"varint,5,opt,name=grade,proto3" json:"grade,omitempty"`                                   //角色等级
	GradeFrame  uint32       `protobuf:"varint,6,opt,name=grade_frame,json=gradeFrame,proto3" json:"grade_frame,omitempty"`       //grade像框
	Soul        uint32       `protobuf:"varint,7,opt,name=soul,proto3" json:"soul,omitempty"`                                     //灵魂头像
	TeamId      uint32       `protobuf:"varint,8,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                   //玩家所属队伍id
	JoinTime    uint64       `protobuf:"varint,9,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`             //玩家进入房间的时间
	League      *LeaguePt    `protobuf:"bytes,10,opt,name=league,proto3" json:"league,omitempty"`                                 //段位数据
	RobotTempId uint32       `protobuf:"varint,11,opt,name=robot_temp_id,json=robotTempId,proto3" json:"robot_temp_id,omitempty"` //是否机器人,如果值大于0，则表示是机器人
	Index       uint32       `protobuf:"varint,12,opt,name=index,proto3" json:"index,omitempty"`                                  //成员所在位置
}

func (x *MemberPt) Reset() {
	*x = MemberPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPt) ProtoMessage() {}

func (x *MemberPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPt.ProtoReflect.Descriptor instead.
func (*MemberPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{4}
}

func (x *MemberPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberPt) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *MemberPt) GetCter() *CharacterPt {
	if x != nil {
		return x.Cter
	}
	return nil
}

func (x *MemberPt) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MemberPt) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *MemberPt) GetGradeFrame() uint32 {
	if x != nil {
		return x.GradeFrame
	}
	return 0
}

func (x *MemberPt) GetSoul() uint32 {
	if x != nil {
		return x.Soul
	}
	return 0
}

func (x *MemberPt) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *MemberPt) GetJoinTime() uint64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *MemberPt) GetLeague() *LeaguePt {
	if x != nil {
		return x.League
	}
	return nil
}

func (x *MemberPt) GetRobotTempId() uint32 {
	if x != nil {
		return x.RobotTempId
	}
	return 0
}

func (x *MemberPt) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type WorldCellPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                  //下标
	WorldCellId uint32 `protobuf:"varint,2,opt,name=world_cell_id,json=worldCellId,proto3" json:"world_cell_id,omitempty"` //世界块id
}

func (x *WorldCellPt) Reset() {
	*x = WorldCellPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldCellPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldCellPt) ProtoMessage() {}

func (x *WorldCellPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldCellPt.ProtoReflect.Descriptor instead.
func (*WorldCellPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{5}
}

func (x *WorldCellPt) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WorldCellPt) GetWorldCellId() uint32 {
	if x != nil {
		return x.WorldCellId
	}
	return 0
}

//房间数据
type RoomPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     uint32         `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`             //房间id
	OwnerId    uint32         `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`          //房主ID
	RoomType   uint32         `protobuf:"varint,3,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`       //房间类型
	RoomStatus uint32         `protobuf:"varint,4,opt,name=room_status,json=roomStatus,proto3" json:"room_status,omitempty"` //房间状态 0:未开始，1：已开始游戏
	Setting    *RoomSettingPt `protobuf:"bytes,5,opt,name=setting,proto3" json:"setting,omitempty"`                          //房间设置
	Members    []*MemberPt    `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`                          //成员数据
}

func (x *RoomPt) Reset() {
	*x = RoomPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomPt) ProtoMessage() {}

func (x *RoomPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomPt.ProtoReflect.Descriptor instead.
func (*RoomPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{6}
}

func (x *RoomPt) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomPt) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *RoomPt) GetRoomType() uint32 {
	if x != nil {
		return x.RoomType
	}
	return 0
}

func (x *RoomPt) GetRoomStatus() uint32 {
	if x != nil {
		return x.RoomStatus
	}
	return 0
}

func (x *RoomPt) GetSetting() *RoomSettingPt {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *RoomPt) GetMembers() []*MemberPt {
	if x != nil {
		return x.Members
	}
	return nil
}

//历史消息
type HistoryMessPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoryMessPt) Reset() {
	*x = HistoryMessPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryMessPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMessPt) ProtoMessage() {}

func (x *HistoryMessPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMessPt.ProtoReflect.Descriptor instead.
func (*HistoryMessPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{7}
}

//推送消息
type NoticeMessPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoticeMessPt) Reset() {
	*x = NoticeMessPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeMessPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeMessPt) ProtoMessage() {}

func (x *NoticeMessPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeMessPt.ProtoReflect.Descriptor instead.
func (*NoticeMessPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{8}
}

//玩家角色数据
type CharacterPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CterTempId    uint32   `protobuf:"varint,1,opt,name=cter_temp_id,json=cterTempId,proto3" json:"cter_temp_id,omitempty"` //角色的配置id
	LastUseSkills []uint32 `protobuf:"varint,2,rep,packed,name=last_use_skills,json=lastUseSkills,proto3" json:"last_use_skills,omitempty"`
	Skills        []uint32 `protobuf:"varint,3,rep,packed,name=skills,proto3" json:"skills,omitempty"` //玩家次角色所有已解锁的技能id
}

func (x *CharacterPt) Reset() {
	*x = CharacterPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPt) ProtoMessage() {}

func (x *CharacterPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPt.ProtoReflect.Descriptor instead.
func (*CharacterPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{9}
}

func (x *CharacterPt) GetCterTempId() uint32 {
	if x != nil {
		return x.CterTempId
	}
	return 0
}

func (x *CharacterPt) GetLastUseSkills() []uint32 {
	if x != nil {
		return x.LastUseSkills
	}
	return nil
}

func (x *CharacterPt) GetSkills() []uint32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type SkillPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  uint32 `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`    //技能id
	Cd       uint32 `protobuf:"varint,2,opt,name=cd,proto3" json:"cd,omitempty"`                             //技能当前cd
	IsActive bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"` //技能释放激活
}

func (x *SkillPt) Reset() {
	*x = SkillPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillPt) ProtoMessage() {}

func (x *SkillPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillPt.ProtoReflect.Descriptor instead.
func (*SkillPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{10}
}

func (x *SkillPt) GetSkillId() uint32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SkillPt) GetCd() uint32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *SkillPt) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

//玩家战斗角色数据
type BattleCharacterPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint32     `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`               //玩家id
	CterId     uint32     `protobuf:"varint,2,opt,name=cter_id,json=cterId,proto3" json:"cter_id,omitempty"`               //角色id（服务器生成的唯一id）
	CterTempId uint32     `protobuf:"varint,3,opt,name=cter_temp_id,json=cterTempId,proto3" json:"cter_temp_id,omitempty"` //角色配置id
	Atk        uint32     `protobuf:"varint,4,opt,name=atk,proto3" json:"atk,omitempty"`                                   //攻击力
	Hp         uint32     `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`                                     //角色血量
	Defence    uint32     `protobuf:"varint,6,opt,name=defence,proto3" json:"defence,omitempty"`                           //角色防御
	Energy     uint32     `protobuf:"varint,7,opt,name=energy,proto3" json:"energy,omitempty"`                             //角色当前能量
	Index      uint32     `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                               //角色当前位置
	IsMajor    bool       `protobuf:"varint,9,opt,name=is_major,json=isMajor,proto3" json:"is_major,omitempty"`            //是否是主角色
	Buffs      []uint32   `protobuf:"varint,10,rep,packed,name=buffs,proto3" json:"buffs,omitempty"`                       //角色身上的buff
	Skills     []*SkillPt `protobuf:"bytes,11,rep,name=skills,proto3" json:"skills,omitempty"`                             //角色技能
	Items      []uint32   `protobuf:"varint,12,rep,packed,name=items,proto3" json:"items,omitempty"`                       //玩家身上的道具
	Minons     []uint32   `protobuf:"varint,13,rep,packed,name=minons,proto3" json:"minons,omitempty"`                     //召唤物集合
}

func (x *BattleCharacterPt) Reset() {
	*x = BattleCharacterPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleCharacterPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleCharacterPt) ProtoMessage() {}

func (x *BattleCharacterPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleCharacterPt.ProtoReflect.Descriptor instead.
func (*BattleCharacterPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{11}
}

func (x *BattleCharacterPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BattleCharacterPt) GetCterId() uint32 {
	if x != nil {
		return x.CterId
	}
	return 0
}

func (x *BattleCharacterPt) GetCterTempId() uint32 {
	if x != nil {
		return x.CterTempId
	}
	return 0
}

func (x *BattleCharacterPt) GetAtk() uint32 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *BattleCharacterPt) GetHp() uint32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *BattleCharacterPt) GetDefence() uint32 {
	if x != nil {
		return x.Defence
	}
	return 0
}

func (x *BattleCharacterPt) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *BattleCharacterPt) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BattleCharacterPt) GetIsMajor() bool {
	if x != nil {
		return x.IsMajor
	}
	return false
}

func (x *BattleCharacterPt) GetBuffs() []uint32 {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *BattleCharacterPt) GetSkills() []*SkillPt {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *BattleCharacterPt) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BattleCharacterPt) GetMinons() []uint32 {
	if x != nil {
		return x.Minons
	}
	return nil
}

type IndexCter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CterId uint32 `protobuf:"varint,1,opt,name=cter_id,json=cterId,proto3" json:"cter_id,omitempty"` //角色id（服务器生成的唯一id）
	Index  uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                 //角色在地图上的位置
}

func (x *IndexCter) Reset() {
	*x = IndexCter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexCter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexCter) ProtoMessage() {}

func (x *IndexCter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexCter.ProtoReflect.Descriptor instead.
func (*IndexCter) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{12}
}

func (x *IndexCter) GetCterId() uint32 {
	if x != nil {
		return x.CterId
	}
	return 0
}

func (x *IndexCter) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

//玩家战斗数据
type BattlePlayerPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32               `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //玩家id
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   //玩家名字
	League      *LeaguePt            `protobuf:"bytes,3,opt,name=league,proto3" json:"league,omitempty"`                               //段位数据
	Gold        uint32               `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`                                  //金币
	Grade       uint32               `protobuf:"varint,5,opt,name=grade,proto3" json:"grade,omitempty"`                                //玩家grade
	MajorCter   uint32               `protobuf:"varint,6,opt,name=major_cter,json=majorCter,proto3" json:"major_cter,omitempty"`       //主角色id（服务器生成的唯一id）
	CurrentCter uint32               `protobuf:"varint,7,opt,name=current_cter,json=currentCter,proto3" json:"current_cter,omitempty"` //当前角色id（服务器生成的唯一id）
	Mission     *MissionPt           `protobuf:"bytes,8,opt,name=mission,proto3" json:"mission,omitempty"`                             //任务数据
	IsRobot     bool                 `protobuf:"varint,9,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`             //是否机器人
	IsDied      bool                 `protobuf:"varint,10,opt,name=is_died,json=isDied,proto3" json:"is_died,omitempty"`               //玩家是否已经淘汰
	Cters       []*BattleCharacterPt `protobuf:"bytes,11,rep,name=cters,proto3" json:"cters,omitempty"`                                //玩家所有的战斗角色
}

func (x *BattlePlayerPt) Reset() {
	*x = BattlePlayerPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePlayerPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePlayerPt) ProtoMessage() {}

func (x *BattlePlayerPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePlayerPt.ProtoReflect.Descriptor instead.
func (*BattlePlayerPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{13}
}

func (x *BattlePlayerPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BattlePlayerPt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BattlePlayerPt) GetLeague() *LeaguePt {
	if x != nil {
		return x.League
	}
	return nil
}

func (x *BattlePlayerPt) GetGold() uint32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *BattlePlayerPt) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *BattlePlayerPt) GetMajorCter() uint32 {
	if x != nil {
		return x.MajorCter
	}
	return 0
}

func (x *BattlePlayerPt) GetCurrentCter() uint32 {
	if x != nil {
		return x.CurrentCter
	}
	return 0
}

func (x *BattlePlayerPt) GetMission() *MissionPt {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *BattlePlayerPt) GetIsRobot() bool {
	if x != nil {
		return x.IsRobot
	}
	return false
}

func (x *BattlePlayerPt) GetIsDied() bool {
	if x != nil {
		return x.IsDied
	}
	return false
}

func (x *BattlePlayerPt) GetCters() []*BattleCharacterPt {
	if x != nil {
		return x.Cters
	}
	return nil
}

//任务
type MissionPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId uint32 `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"` //任务id
	Progress  uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`                    //任务进度
	Complete  bool   `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`                    //任务是否已经完成
}

func (x *MissionPt) Reset() {
	*x = MissionPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPt) ProtoMessage() {}

func (x *MissionPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPt.ProtoReflect.Descriptor instead.
func (*MissionPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{14}
}

func (x *MissionPt) GetMissionId() uint32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *MissionPt) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *MissionPt) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

type EffectPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectType  uint32 `protobuf:"varint,2,opt,name=effect_type,json=effectType,proto3" json:"effect_type,omitempty"`    //效果类型
	EffectValue uint32 `protobuf:"varint,3,opt,name=effect_value,json=effectValue,proto3" json:"effect_value,omitempty"` //效果值
}

func (x *EffectPt) Reset() {
	*x = EffectPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectPt) ProtoMessage() {}

func (x *EffectPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectPt.ProtoReflect.Descriptor instead.
func (*EffectPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{15}
}

func (x *EffectPt) GetEffectType() uint32 {
	if x != nil {
		return x.EffectType
	}
	return 0
}

func (x *EffectPt) GetEffectValue() uint32 {
	if x != nil {
		return x.EffectValue
	}
	return 0
}

//受影响封装
type TargetPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetValue   []uint32           `protobuf:"varint,1,rep,packed,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"` //目标值
	Effects       []*EffectPt        `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`                                    //效果
	AddBuffs      []uint32           `protobuf:"varint,3,rep,packed,name=add_buffs,json=addBuffs,proto3" json:"add_buffs,omitempty"`          //对目标增加对buff
	PassiveEffect []*TriggerEffectPt `protobuf:"bytes,4,rep,name=passiveEffect,proto3" json:"passiveEffect,omitempty"`                        //被动效果
	LostBuffs     []uint32           `protobuf:"varint,5,rep,packed,name=lost_buffs,json=lostBuffs,proto3" json:"lost_buffs,omitempty"`       //目标失效的buff
	LostSkills    []uint32           `protobuf:"varint,6,rep,packed,name=lost_skills,json=lostSkills,proto3" json:"lost_skills,omitempty"`    //玩家丢失的技能
	TransformCter *BattleCharacterPt `protobuf:"bytes,7,opt,name=transform_cter,json=transformCter,proto3" json:"transform_cter,omitempty"`   //变身之后的角色
	NewCter       *BattleCharacterPt `protobuf:"bytes,8,opt,name=new_cter,json=newCter,proto3" json:"new_cter,omitempty"`                     //战斗中生成的新角色，一般都是召唤出来的
}

func (x *TargetPt) Reset() {
	*x = TargetPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPt) ProtoMessage() {}

func (x *TargetPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPt.ProtoReflect.Descriptor instead.
func (*TargetPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{16}
}

func (x *TargetPt) GetTargetValue() []uint32 {
	if x != nil {
		return x.TargetValue
	}
	return nil
}

func (x *TargetPt) GetEffects() []*EffectPt {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *TargetPt) GetAddBuffs() []uint32 {
	if x != nil {
		return x.AddBuffs
	}
	return nil
}

func (x *TargetPt) GetPassiveEffect() []*TriggerEffectPt {
	if x != nil {
		return x.PassiveEffect
	}
	return nil
}

func (x *TargetPt) GetLostBuffs() []uint32 {
	if x != nil {
		return x.LostBuffs
	}
	return nil
}

func (x *TargetPt) GetLostSkills() []uint32 {
	if x != nil {
		return x.LostSkills
	}
	return nil
}

func (x *TargetPt) GetTransformCter() *BattleCharacterPt {
	if x != nil {
		return x.TransformCter
	}
	return nil
}

func (x *TargetPt) GetNewCter() *BattleCharacterPt {
	if x != nil {
		return x.NewCter
	}
	return nil
}

//触发效果
type TriggerEffectPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"` //触发的buff_id
	Type   uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                   //效果类型
	Value  uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`                 //效果值
}

func (x *TriggerEffectPt) Reset() {
	*x = TriggerEffectPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEffectPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEffectPt) ProtoMessage() {}

func (x *TriggerEffectPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEffectPt.ProtoReflect.Descriptor instead.
func (*TriggerEffectPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{17}
}

func (x *TriggerEffectPt) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *TriggerEffectPt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TriggerEffectPt) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//行动单元封装
type ActionUnitPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCter           uint32      `protobuf:"varint,1,opt,name=from_cter,json=fromCter,proto3" json:"from_cter,omitempty"`                                   //发起的玩家,如果角色id为0，则代表纯显示的消息
	ActionType         uint32      `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`                             //行动类型，如果from_cter=0,则此值也一定为0
	ActionValue        []uint32    `protobuf:"varint,3,rep,packed,name=action_value,json=actionValue,proto3" json:"action_value,omitempty"`                   //行动对应类型的值，如果action_type=0，则此值一定为0
	Targets            []*TargetPt `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`                                                      //目标列表，对目标造成对影响
	LostBuffs          []uint32    `protobuf:"varint,5,rep,packed,name=lost_buffs,json=lostBuffs,proto3" json:"lost_buffs,omitempty"`                         //from_cter失效的buff
	IsRewardMovePoints bool        `protobuf:"varint,6,opt,name=is_reward_move_points,json=isRewardMovePoints,proto3" json:"is_reward_move_points,omitempty"` //是否奖励移动点数
}

func (x *ActionUnitPt) Reset() {
	*x = ActionUnitPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionUnitPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionUnitPt) ProtoMessage() {}

func (x *ActionUnitPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionUnitPt.ProtoReflect.Descriptor instead.
func (*ActionUnitPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{18}
}

func (x *ActionUnitPt) GetFromCter() uint32 {
	if x != nil {
		return x.FromCter
	}
	return 0
}

func (x *ActionUnitPt) GetActionType() uint32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *ActionUnitPt) GetActionValue() []uint32 {
	if x != nil {
		return x.ActionValue
	}
	return nil
}

func (x *ActionUnitPt) GetTargets() []*TargetPt {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ActionUnitPt) GetLostBuffs() []uint32 {
	if x != nil {
		return x.LostBuffs
	}
	return nil
}

func (x *ActionUnitPt) GetIsRewardMovePoints() bool {
	if x != nil {
		return x.IsRewardMovePoints
	}
	return false
}

//buff结构体
type BuffPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId         uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`                         //buffid
	TriggerTimesed uint32 `protobuf:"varint,2,opt,name=trigger_timesed,json=triggerTimesed,proto3" json:"trigger_timesed,omitempty"` //已经触发过的次数
	KeepTimes      uint32 `protobuf:"varint,3,opt,name=keep_times,json=keepTimes,proto3" json:"keep_times,omitempty"`                //剩余持续轮数
}

func (x *BuffPt) Reset() {
	*x = BuffPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffPt) ProtoMessage() {}

func (x *BuffPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffPt.ProtoReflect.Descriptor instead.
func (*BuffPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{19}
}

func (x *BuffPt) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *BuffPt) GetTriggerTimesed() uint32 {
	if x != nil {
		return x.TriggerTimesed
	}
	return 0
}

func (x *BuffPt) GetKeepTimes() uint32 {
	if x != nil {
		return x.KeepTimes
	}
	return 0
}

//结算玩家
type SummaryDataPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //玩家id
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   //名字
	CterId      uint32    `protobuf:"varint,3,opt,name=cter_id,json=cterId,proto3" json:"cter_id,omitempty"`                //角色id
	Grade       uint32    `protobuf:"varint,4,opt,name=grade,proto3" json:"grade,omitempty"`                                //当前等级
	Rank        uint32    `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                  //当局排名
	RewardScore int32     `protobuf:"varint,6,opt,name=reward_score,json=rewardScore,proto3" json:"reward_score,omitempty"` //奖励积分
	League      *LeaguePt `protobuf:"bytes,7,opt,name=league,proto3" json:"league,omitempty"`                               //段位数据
}

func (x *SummaryDataPt) Reset() {
	*x = SummaryDataPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDataPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDataPt) ProtoMessage() {}

func (x *SummaryDataPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDataPt.ProtoReflect.Descriptor instead.
func (*SummaryDataPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{20}
}

func (x *SummaryDataPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SummaryDataPt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SummaryDataPt) GetCterId() uint32 {
	if x != nil {
		return x.CterId
	}
	return 0
}

func (x *SummaryDataPt) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *SummaryDataPt) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SummaryDataPt) GetRewardScore() int32 {
	if x != nil {
		return x.RewardScore
	}
	return 0
}

func (x *SummaryDataPt) GetLeague() *LeaguePt {
	if x != nil {
		return x.League
	}
	return nil
}

type CterStatusPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //玩家id
	Skills []uint32  `protobuf:"varint,2,rep,packed,name=skills,proto3" json:"skills,omitempty"`        //角色技能
	Buffs  []*BuffPt `protobuf:"bytes,3,rep,name=buffs,proto3" json:"buffs,omitempty"`                  //玩家身上buff数据
}

func (x *CterStatusPt) Reset() {
	*x = CterStatusPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CterStatusPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CterStatusPt) ProtoMessage() {}

func (x *CterStatusPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CterStatusPt.ProtoReflect.Descriptor instead.
func (*CterStatusPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{21}
}

func (x *CterStatusPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CterStatusPt) GetSkills() []uint32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *CterStatusPt) GetBuffs() []*BuffPt {
	if x != nil {
		return x.Buffs
	}
	return nil
}

type CellBuffPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` //地图块下标
	Buffs []*BuffPt `protobuf:"bytes,2,rep,name=buffs,proto3" json:"buffs,omitempty"`  //地图块上buff数据
}

func (x *CellBuffPt) Reset() {
	*x = CellBuffPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBuffPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBuffPt) ProtoMessage() {}

func (x *CellBuffPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBuffPt.ProtoReflect.Descriptor instead.
func (*CellBuffPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{22}
}

func (x *CellBuffPt) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellBuffPt) GetBuffs() []*BuffPt {
	if x != nil {
		return x.Buffs
	}
	return nil
}

//惩罚数据
type PunishMatchPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间(unix时间戳，毫秒数)
	PunishId  uint32 `protobuf:"varint,2,opt,name=punish_id,json=punishId,proto3" json:"punish_id,omitempty"`    //惩罚id
	TodayId   uint32 `protobuf:"varint,3,opt,name=today_id,json=todayId,proto3" json:"today_id,omitempty"`       //服务器用的，客户端不用管
}

func (x *PunishMatchPt) Reset() {
	*x = PunishMatchPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunishMatchPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunishMatchPt) ProtoMessage() {}

func (x *PunishMatchPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunishMatchPt.ProtoReflect.Descriptor instead.
func (*PunishMatchPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{23}
}

func (x *PunishMatchPt) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PunishMatchPt) GetPunishId() uint32 {
	if x != nil {
		return x.PunishId
	}
	return 0
}

func (x *PunishMatchPt) GetTodayId() uint32 {
	if x != nil {
		return x.TodayId
	}
	return 0
}

//段位数据
type LeaguePt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueScore int32 `protobuf:"varint,1,opt,name=league_score,json=leagueScore,proto3" json:"league_score,omitempty"` //玩家总积分
	LeagueId    int32 `protobuf:"varint,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`          //段位id
	LeagueTime  int64 `protobuf:"varint,3,opt,name=league_time,json=leagueTime,proto3" json:"league_time,omitempty"`    //进入段位时间(客户端不要管这个属性)
}

func (x *LeaguePt) Reset() {
	*x = LeaguePt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaguePt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaguePt) ProtoMessage() {}

func (x *LeaguePt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaguePt.ProtoReflect.Descriptor instead.
func (*LeaguePt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{24}
}

func (x *LeaguePt) GetLeagueScore() int32 {
	if x != nil {
		return x.LeagueScore
	}
	return 0
}

func (x *LeaguePt) GetLeagueId() int32 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *LeaguePt) GetLeagueTime() int64 {
	if x != nil {
		return x.LeagueTime
	}
	return 0
}

type RankInfoPt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //玩家id
	Name   string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                    //名字
	Rank   int32     `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`                   //排名
	League *LeaguePt `protobuf:"bytes,4,opt,name=league,proto3" json:"league,omitempty"`                //段位数据
	Cters  []uint32  `protobuf:"varint,5,rep,packed,name=cters,proto3" json:"cters,omitempty"`          //最常用的三个角色
}

func (x *RankInfoPt) Reset() {
	*x = RankInfoPt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_base_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfoPt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfoPt) ProtoMessage() {}

func (x *RankInfoPt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_base_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfoPt.ProtoReflect.Descriptor instead.
func (*RankInfoPt) Descriptor() ([]byte, []int) {
	return file_proto_files_base_proto_rawDescGZIP(), []int{25}
}

func (x *RankInfoPt) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RankInfoPt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankInfoPt) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankInfoPt) GetLeague() *LeaguePt {
	if x != nil {
		return x.League
	}
	return nil
}

func (x *RankInfoPt) GetCters() []uint32 {
	if x != nil {
		return x.Cters
	}
	return nil
}

var File_proto_files_base_proto protoreflect.FileDescriptor

var file_proto_files_base_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x22, 0x78, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac, 0x02, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x74, 0x52, 0x0b, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x75, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x75, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x74, 0x52,
	0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6c, 0x63, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x6c, 0x63, 0x22, 0x61, 0x0a, 0x08, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x50, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x0b,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x08, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x63, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x74, 0x52,
	0x04, 0x63, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6f, 0x75, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x74, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x47, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x50, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x50, 0x74, 0x22, 0x6f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x50, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x74, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x68, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x74, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x74, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x50, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x63, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x43,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x74, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x44, 0x69, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50,
	0x74, 0x52, 0x05, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x09, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x08,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xed, 0x02, 0x0a,
	0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x74, 0x52,
	0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x74, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x43, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x50, 0x74, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x74, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x0f,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x69, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x50, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x50, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x0c,
	0x43, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x50, 0x74, 0x52, 0x05, 0x62, 0x75,
	0x66, 0x66, 0x73, 0x22, 0x48, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x50,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x50, 0x74, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x22, 0x66, 0x0a,
	0x0d, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x50, 0x74, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_files_base_proto_rawDescOnce sync.Once
	file_proto_files_base_proto_rawDescData = file_proto_files_base_proto_rawDesc
)

func file_proto_files_base_proto_rawDescGZIP() []byte {
	file_proto_files_base_proto_rawDescOnce.Do(func() {
		file_proto_files_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_files_base_proto_rawDescData)
	})
	return file_proto_files_base_proto_rawDescData
}

var file_proto_files_base_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_files_base_proto_goTypes = []interface{}{
	(*RoomSettingPt)(nil),     // 0: protos.RoomSettingPt
	(*PlayerPt)(nil),          // 1: protos.PlayerPt
	(*SeasonPt)(nil),          // 2: protos.SeasonPt
	(*WorldBossPt)(nil),       // 3: protos.WorldBossPt
	(*MemberPt)(nil),          // 4: protos.MemberPt
	(*WorldCellPt)(nil),       // 5: protos.WorldCellPt
	(*RoomPt)(nil),            // 6: protos.RoomPt
	(*HistoryMessPt)(nil),     // 7: protos.HistoryMessPt
	(*NoticeMessPt)(nil),      // 8: protos.NoticeMessPt
	(*CharacterPt)(nil),       // 9: protos.CharacterPt
	(*SkillPt)(nil),           // 10: protos.SkillPt
	(*BattleCharacterPt)(nil), // 11: protos.BattleCharacterPt
	(*IndexCter)(nil),         // 12: protos.IndexCter
	(*BattlePlayerPt)(nil),    // 13: protos.BattlePlayerPt
	(*MissionPt)(nil),         // 14: protos.MissionPt
	(*EffectPt)(nil),          // 15: protos.EffectPt
	(*TargetPt)(nil),          // 16: protos.TargetPt
	(*TriggerEffectPt)(nil),   // 17: protos.TriggerEffectPt
	(*ActionUnitPt)(nil),      // 18: protos.ActionUnitPt
	(*BuffPt)(nil),            // 19: protos.BuffPt
	(*SummaryDataPt)(nil),     // 20: protos.SummaryDataPt
	(*CterStatusPt)(nil),      // 21: protos.CterStatusPt
	(*CellBuffPt)(nil),        // 22: protos.CellBuffPt
	(*PunishMatchPt)(nil),     // 23: protos.PunishMatchPt
	(*LeaguePt)(nil),          // 24: protos.LeaguePt
	(*RankInfoPt)(nil),        // 25: protos.RankInfoPt
}
var file_proto_files_base_proto_depIdxs = []int32{
	23, // 0: protos.PlayerPt.punish_match:type_name -> protos.PunishMatchPt
	24, // 1: protos.PlayerPt.league:type_name -> protos.LeaguePt
	9,  // 2: protos.MemberPt.cter:type_name -> protos.CharacterPt
	24, // 3: protos.MemberPt.league:type_name -> protos.LeaguePt
	0,  // 4: protos.RoomPt.setting:type_name -> protos.RoomSettingPt
	4,  // 5: protos.RoomPt.members:type_name -> protos.MemberPt
	10, // 6: protos.BattleCharacterPt.skills:type_name -> protos.SkillPt
	24, // 7: protos.BattlePlayerPt.league:type_name -> protos.LeaguePt
	14, // 8: protos.BattlePlayerPt.mission:type_name -> protos.MissionPt
	11, // 9: protos.BattlePlayerPt.cters:type_name -> protos.BattleCharacterPt
	15, // 10: protos.TargetPt.effects:type_name -> protos.EffectPt
	17, // 11: protos.TargetPt.passiveEffect:type_name -> protos.TriggerEffectPt
	11, // 12: protos.TargetPt.transform_cter:type_name -> protos.BattleCharacterPt
	11, // 13: protos.TargetPt.new_cter:type_name -> protos.BattleCharacterPt
	16, // 14: protos.ActionUnitPt.targets:type_name -> protos.TargetPt
	24, // 15: protos.SummaryDataPt.league:type_name -> protos.LeaguePt
	19, // 16: protos.CterStatusPt.buffs:type_name -> protos.BuffPt
	19, // 17: protos.CellBuffPt.buffs:type_name -> protos.BuffPt
	24, // 18: protos.RankInfoPt.league:type_name -> protos.LeaguePt
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_files_base_proto_init() }
func file_proto_files_base_proto_init() {
	if File_proto_files_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_files_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomSettingPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldBossPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldCellPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryMessPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeMessPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleCharacterPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexCter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePlayerPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEffectPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionUnitPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDataPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CterStatusPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBuffPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunishMatchPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaguePt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_files_base_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfoPt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_files_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_files_base_proto_goTypes,
		DependencyIndexes: file_proto_files_base_proto_depIdxs,
		MessageInfos:      file_proto_files_base_proto_msgTypes,
	}.Build()
	File_proto_files_base_proto = out.File
	file_proto_files_base_proto_rawDesc = nil
	file_proto_files_base_proto_goTypes = nil
	file_proto_files_base_proto_depIdxs = nil
}
